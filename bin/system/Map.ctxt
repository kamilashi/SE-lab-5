#BlueJ class context
comment0.target=Map
comment1.params=
comment1.target=Map()
comment10.params=mapData
comment10.target=void\ setMapData(Map.MapData)
comment11.params=i\ j
comment11.target=void\ deletePoint(int,\ int)
comment12.params=
comment12.target=void\ printActivePoints()
comment2.params=
comment2.target=Map\ getInstance()
comment2.text=\r\n\ \ Returns\ an\ instance\ of\ the\ class\ Map\ the\ first\ time\ it's\ called.\r\n\ \ for\ every\ subsequent\ time\ returns\ null\r\n
comment3.params=x\ y\ w\ l\ dX1\ dY1\ dX2\ dY2
comment3.target=void\ addRoom(int,\ int,\ int,\ int,\ int,\ int,\ int,\ int)
comment3.text=\r\n\ \ Add\ a\ room\ to\ map.\ The\ number\ of\ rooms\ can\ be\ unlimited,\ as\ long\ as\ it\ fits\ inside\ the\ mapPainter\r\n\ \ @param\ x,y\ room\ coordinates\r\n\ \ @param\ w,l\ room\ width\ and\ length\ (height\ in\ java.swing\ terms)\r\n\ \ @param\ dX1,dY1,\ dX2,\ dY2\ start\ and\ end\ coordinates\ of\ a\ door\ (for\ now\ only\ one\ door\ per\ room\ is\ supported)\ \ \r\n
comment4.params=index
comment4.target=Map.Room\ getRoom(int)
comment4.text=\r\n\ \ Get\ a\ room\ by\ index\r\n\ \ if\ the\ Room\ mode\ has\ been\ chosen.\r\n
comment5.params=x\ y
comment5.target=Map.Room\ getRoom(int,\ int)
comment5.text=\r\n\ \ Get\ a\ room\ which\ contains\ the\ point\ (x,y)\r\n\ \ @param\ x,\ y\ coordinates\ that\ are\ tested\r\n
comment6.params=x1\ y1\ x2\ y2\ t
comment6.target=Map.Tuple\ lerp(int,\ int,\ int,\ int,\ float)
comment6.text=\r\n\ \ Constructor\ of\ class\ MapPainter.\r\n\ \ @param\ drawRoomIndexes\ boolean\ flag\ that\ indicates\ whether\ the\ room\ indexes\ should\ be\ printed.\ Is\ set\ to\ true\ \r\n\ \ if\ the\ Room\ mode\ has\ been\ chosen.\r\n
comment7.params=
comment7.target=void\ resetMapData()
comment7.text=\r\n\ \ Creates\ a\ hashmap\ that\ stores\ all\ the\ valid\ coordinates\ of\ where\ the\ robot\ is\ allowed\ to\ go.\ By\ default\ it's\ \r\n\ \ all\ the\ points\ within\ the\ rooms\ +\ doorways.\ The\ coordinates\ are\ stored\ in\ the\ app\ in\ a\ form\ of\ a\ hashmap,\ \r\n\ \ where\ the\ value\ is\ the\ tuple\ itself\ (X\ and\ y)\ and\ the\ key\ is\ it's\ string\ representation,\ whereas\ the\ data\ \r\n\ \ exported\ to\ be\ used\ by\ the\ robot\ is\ of\ type\ MapData\ which\ only\ contains\ an\ array\ of\ tuples.\r\n
comment8.params=
comment8.target=Map.MapData\ getMapData()
comment8.text=\r\n\ \ returns\ map\ data\ to\ be\ exported,\ and\ creates\ a\ new\ instance\ if\ no\ such\ exists\ at\ a\ time\ of\ function\ call.\r\n\ \ Also\ cleans\ the\ coordinates\ in\ the\ process\ by\ deleting\ negative\ entries.\r\n
comment9.params=tuples
comment9.target=void\ updateMapData(java.util.ArrayList)
comment9.text=\r\n\ \ Deletes\ valid\ coordinates,\ not\ by\ removing\ them\ from\ the\ hashmao,\ but\ by\ rewriting\ the\ corresponding\ entry\ with\ negative\ numbers\r\n\ \ that\ will\ be\ deleted\ later\ when\ exporting\ the\ coordinates\ inside\ the\ getMapData()\ function.\r\n
numComments=13
